//
//  CleanSwiftViewController.swift
//  RXSwiftVIPER
//
//  Created by Alisher Saideshov on 15.04.2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CleanSwiftDisplayLogic: AnyObject {
    func addCharactersToVariable(viewModel: Main.displayCartoonCharacters.ViewModel)
}

final class CleanSwiftViewController: UIViewController, CleanSwiftDisplayLogic {

    var interactor: CleanSwiftBusinessLogic?
    var router: (NSObjectProtocol & CleanSwiftRoutingLogic & CleanSwiftDataPassing)?

    // MARK: - TableView
    private lazy var mainTable = UITableView()

    private lazy var characters: [Main.displayCartoonCharacters.ViewModel.characterInformationModel] = []

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = CleanSwiftInteractor()
        let presenter = CleanSwiftPresenter()
        let router = CleanSwiftRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func setupConstraints() {
        let safeArea = view.safeAreaLayoutGuide

        mainTable.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            mainTable.topAnchor.constraint(equalTo: safeArea.topAnchor, constant: 0),
            mainTable.leadingAnchor.constraint(equalTo: safeArea.leadingAnchor, constant: 0),
            mainTable.trailingAnchor.constraint(equalTo: safeArea.trailingAnchor, constant: 0),
            mainTable.bottomAnchor.constraint(equalTo: safeArea.bottomAnchor, constant: 0)
        ])
    }

    private func mainTableSetup() {
        mainTable.delegate = self
        mainTable.dataSource = self
        mainTable.register(
            MainTableViewCell.self,
            forCellReuseIdentifier: "CharacterInformation") // не забываем регистрировать ячейку
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        view.addSubview(mainTable)
        mainTableSetup()
        setupConstraints()
        // Сразу после настройки делаем запрос на добавление
        // информации о героях из API
        requestCartoonCharacters()
    }

    private func requestCartoonCharacters() {
        // запрос пустой, как и обговаривалось ранее для данной реализации
        let request = Main.displayCartoonCharacters.Request()
        // в интеракторе вызываем необходимую функцию по извлечению данных из сети
        // и передаем в нее наш запрос (он пустой)
        interactor?.fetchCartoonCharacters(request: request)
    }

    func addCharactersToVariable(viewModel: Main.displayCartoonCharacters.ViewModel) {
        let characterInformation = viewModel.characterInformation
        self.characters = characterInformation
        mainTable.reloadData()
    }
}

// MARK: - UITableViewDelegate
extension CleanSwiftViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.saveSelectedItem(character: characters[indexPath.row])
        router?.routeToDetailedViewController()
    }
}

// MARK: - tableview
extension CleanSwiftViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return characters.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CharacterInformation") as? MainTableViewCell
        cell?.setupLabels(name: characters[indexPath.row].name, species: characters[indexPath.row].species)
        return cell ?? UITableViewCell()
    }
}
